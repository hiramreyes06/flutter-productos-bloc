
Para esto, instalaremos una libreria de rx para poder escuchar cuando 2 o mas stream estan fluyendo data,

en el pubspec.yaml en las dependecias agregamos:

rxdart: ^0.25.0

Despues en nuestro LoginBloc, vamos a importar la libreria para utilizar el objecto BehaviorSubject,
el cual es compatible con los Stream, asi quedaria la clase

import 'dart:async';

import 'package:formvalidation/src/bloc/validators.dart';

import 'package:rxdart/rxdart.dart';

//Aqui podemos agregar los validators personalizados para los stream
class LoginBloc with Validators{

//Libreria rx con el patron observable
//Por defecto funciona con el metodo brodcoast() para varios widget a la vez
  final _emailController = BehaviorSubject<String>();
  final _passwordController = BehaviorSubject<String>();

  //Escuhar datos emitodos por el stream
  //AL agregar un transform podemos establecer las validaciones personalizadas
  Stream<String> get emailStream => _emailController.stream.transform( validarEmail );
  Stream<String> get passwordStream => _passwordController.stream.transform( validarPassword );
  
  //Crear metodos para insertar valores al stream
  Function(String) get changeEmail => _emailController.sink.add;
  Function(String) get changePassword => _passwordController.sink.add;

  //Observar 2 streams a la vez
  //Cuando los 2 flujos de stream son validos se activara este stream
  Stream<bool> get formValidStream =>
    Rx.combineLatest2( emailStream , passwordStream, (email, password ) => true);

//El objecto BehaviorSubjec tinene en como propiedad el ultimo valor emitido
String get emailValue => _emailController.value;
String get passwordValue => _passwordController.value;

//Siempre sera necesario declarar el metodo que cerrara el flujo de los stream
  dispose(){
    _emailController?.close();
    _passwordController?.close();

  }

}


Ahora para poder escuchar el evento de los 2 stream, en el widget que vallamos a utilizar,
creamos:

Widget _crearBoton( LoginBloc bloc) {

	//El nuevo stream de la libreria rx para observar el flujo de 2 streams
    return StreamBuilder(
      stream: bloc.formValidStream ,
     
      builder: (BuildContext context, AsyncSnapshot snapshot){
        return RaisedButton(
      child: Container( 
        //Con esto modificamos el tamaÃ±o del boton en base a los bordes
        padding: EdgeInsets.symmetric( horizontal: 80.0 , vertical: 15.0),
        child: Text('Ingresar'),
      ),
      shape: RoundedRectangleBorder( 
        borderRadius: BorderRadius.circular( 5.0 )
      ),
      //Con esto ajustamos los bordes de la sombra para removerlo
      elevation: 0.0,
      color: Colors.deepPurple,
      textColor: Colors.white,
      onPressed: snapshot.hasData ? () => _login( bloc ) : null ,
    );

      }
    );

  }

  _login( LoginBloc bloc ){
    print('=========');
    print('EL correo es: ${ bloc.emailValue }');
    print('EL correo es: ${ bloc.passwordValue }');


  }



